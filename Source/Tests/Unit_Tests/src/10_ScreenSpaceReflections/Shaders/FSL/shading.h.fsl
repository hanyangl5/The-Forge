/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "Shader_Defs.h.fsl"
#include "../../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

float3 calculateIllumination(
	float3 normal,
	float3 ViewVec,
	float3 HalfVec,
	float NoL,
	float NoV,
	float3 camPos,
	float3 normalizedDirToLight, float3 position,
	float3 albedo,
	float3 specularColor,
	float Roughness,
	float Metallic,
	bool isBackface,
	bool isPBR,
	float shadowFactor)
{
	float3 finalColor;

	if (isPBR)
	{
		finalColor = PBR_shadowFactor(NoL, NoV, normalizedDirToLight, ViewVec, HalfVec, normal, albedo, specularColor, Roughness, Metallic, isBackface, shadowFactor);
	}
	else
	{
		specularColor = calculateSpecular(specularColor, camPos, position, normalizedDirToLight, normal);

		finalColor = albedo + lerp(float3(0.0, 0.0, 0.0), specularColor, shadowFactor);
	}

	finalColor *= shadowFactor;

	return finalColor;
}
