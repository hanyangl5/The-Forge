/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 * 
 * This file(code) is licensed under a 
 * Creative Commons Attribution-NonCommercial 4.0 International License 
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode) 
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#include "shader_defs.h.fsl"
#include "vb_rsm_resources.h.fsl"
#include "../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

STRUCT(PsIn)
{
	DATA(float4,     position, SV_Position);
	DATA(float2,     texCoord, TEXCOORD0);
#if !defined(INDIRECT_ROOT_CONSTANT)
    DATA(FLAT(uint), drawID,   TEXCOORD1);
#endif
};

float4 PS_MAIN(PsIn In, SV_PrimitiveID(uint) primitiveID)
{
	INIT_MAIN;

    uint matBaseSlot = BaseInstanceBuffer(GEOMSET_ALPHA_CUTOUT, VIEW_CAMERA);
    uint materialID  = Get(indirectMaterialBuffer)[matBaseSlot + getDrawID()];

	float4 texColor;
    BeginNonUniformResourceIndex(materialID, MAX_TEXTURE_UNITS);
		texColor = SampleTex2D(Get(diffuseMaps)[materialID], Get(textureFilter), In.texCoord);
    EndNonUniformResourceIndex();

    clip(texColor.a - 0.5f);

    RETURN(unpackUnorm4x8(GET_ALPHA_OUTPUT_VB_ID(getDrawID(), primitiveID)));
}
