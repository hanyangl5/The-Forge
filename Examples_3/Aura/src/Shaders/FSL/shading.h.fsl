/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 *
 * This is a part of Aura.
 *
 * This file(code) is licensed under a
 * Creative Commons Attribution-NonCommercial 4.0 International License
 *
 *   (https://creativecommons.org/licenses/by-nc/4.0/legalcode)
 *
 * Based on a work at https://github.com/ConfettiFX/The-Forge.
 * You may not use the material for commercial purposes.
*/

#ifndef SHADING_H
#define SHADING_H

#include "shader_defs.h.fsl"
#include "../../../../../Common_3/Graphics/ShaderUtilities.h.fsl"

#define SHADOW_PCF 0
#define SHADOW_ESM 1
#define SHADOW SHADOW_PCF
#ifdef TARGET_ANDROID
// GPU hang with 32 samples
#define NUM_SHADOW_SAMPLES 16
#else
#define NUM_SHADOW_SAMPLES 32
#endif


STATIC const float NUM_SHADOW_SAMPLES_INV = 0.03125f;

#if NUM_SHADOW_SAMPLES == 16
STATIC const float shadowSamples[NUM_SHADOW_SAMPLES * 2] =
{
	-0.17466460f, -0.7913184f,
	 0.08863912f, -0.898169f,
	 0.17484090f, -0.5252063f,
	 0.45293190f, -0.384986f,
	 0.38576580f, -0.9096935f,
	 0.76801100f, -0.4906538f,
	 0.69465550f,  0.1605866f,
	 0.79865440f,  0.5325912f,
	 0.28476930f,  0.2293397f,
	-0.43578930f, -0.3808875f,
	-0.13912900f,  0.2394065f,
	 0.42878540f,  0.899425f,
	-0.69243230f, -0.2203967f,
	-0.26117240f,  0.7359962f,
	-0.85010400f,  0.1263935f,
	-0.53809670f,  0.6264234f
};
#else
STATIC const float shadowSamples[NUM_SHADOW_SAMPLES * 2] =
{
	-0.17466460f, -0.7913184f,
	-0.12979200f, -0.4477116f,
	 0.08863912f, -0.898169f,
	-0.58914990f, -0.6781639f,
	 0.17484090f, -0.5252063f,
	 0.64833250f, -0.752117f,
	 0.45293190f, -0.384986f,
	 0.09757467f, -0.1166954f,
	 0.38576580f, -0.9096935f,
	 0.56130580f, -0.1283066f,
	 0.76801100f, -0.4906538f,
	 0.84994380f, -0.220937f,
	 0.69465550f,  0.1605866f,
	 0.96142970f,  0.05975229f,
	 0.79865440f,  0.5325912f,
	 0.45139650f,  0.5592551f,
	 0.28476930f,  0.2293397f,
	-0.21189960f, -0.1609127f,
	-0.43578930f, -0.3808875f,
	-0.46626720f, -0.05288446f,
	-0.13912900f,  0.2394065f,
	 0.17818530f,  0.5254948f,
	 0.42878540f,  0.899425f,
	 0.12893490f,  0.8724155f,
	-0.69243230f, -0.2203967f,
	-0.48997000f,  0.2795907f,
	-0.26117240f,  0.7359962f,
	-0.77041720f,  0.4233134f,
	-0.85010400f,  0.1263935f,
	-0.83452670f, -0.4991361f,
	-0.53809670f,  0.6264234f,
	-0.97693120f, -0.1550569f
};
#endif

float3 calculateIllumination(
	float3 normal,
	float3 ViewVec,
	float3 HalfVec,
	float3 ReflectVec,
	float NoL,
	float NoV,
	float3 camPos, float esmControl,
	float3 normalizedDirToLight, float4 posLS, float3 position,
	Tex2D(float) shadowMap,
	float3 albedo,
	float3 specularColor,
	float Roughness,
	float Metallic,
	SamplerState sh,
	bool isBackface,
	float isPBR,
	float shadowFactor)
{
	// Project pixel position post-perspective division coordinates and map to [0..1] range to access the shadow map
	posLS /= posLS.w;
	posLS.y *= -1.0f;
	posLS.xy = posLS.xy * 0.5 + f2(0.5f);
	shadowFactor = 0.0f;

	float2 Gaps = float2(0.0009765625f, 0.0009765625f);
	float2 HalfGaps = float2(0.00048828125f, 0.00048828125f);

	posLS.xy += HalfGaps;

	if (all(GreaterThan(posLS.xy, 0.0f)) && all(LessThan(posLS.xy, 1.0f)))
	{
#if SHADOW == SHADOW_PCF
		// waste of shader cycles
		// Perform percentage-closer shadows with randomly rotated poisson kernel
		float shadowFilterSize = 0.0016f;
		float angle = random(position, f3(20.0f));
		float s = sin(angle);
		float c = cos(angle);

		for (int i = 0; i < NUM_SHADOW_SAMPLES; ++i)
		{
			float2 offset = float2(shadowSamples[i * 2], shadowSamples[i * 2 + 1]);
			offset = float2(offset.x * c + offset.y * s, offset.x * -s + offset.y * c);
			offset *= shadowFilterSize;
			float shadowMapValue = SampleLvlTex2D(shadowMap, sh, posLS.xy + offset, 0).x;
			shadowFactor += (shadowMapValue < posLS.z - 0.002f ? 0.0f : 1.0f);
		}
		shadowFactor *= NUM_SHADOW_SAMPLES_INV;
#elif SHADOW == SHADOW_ESM
		// ESM
		float2 HalfGaps = float2(0.00048828125, 0.00048828125);
		posLS.xy += HalfGaps;
		shadowFactor = calcESMShadowFactor(posLS, shadowMap, sh, esmControl);
#endif
	}

	float3 finalColor;

	if (isPBR > 0.5f)
	{
		finalColor = PBR_shadowFactor(NoL, NoV, -normalizedDirToLight, ViewVec, HalfVec, normal, albedo, specularColor, Roughness, Metallic, isBackface, shadowFactor);
	}
	else
	{
		specularColor = calculateSpecular(specularColor, camPos, position, -normalizedDirToLight, normal);
		finalColor    = albedo + lerp(f3(0.0f), specularColor, shadowFactor);
	}

	finalColor *= shadowFactor;

	return finalColor;
}

float3 pointLightShade(
	float3 normal,
	float3 ViewVec,
	float3 HalfVec,
	float3 ReflectVec,
	float NoL,
	float NoV,
	float3 lightPos,
	float3 lightCol,
	float3 camPos,
	float3 normalizedDirToLight, float4 posLS, float3 position,
	float3 albedo,
	float3 specularColor,
	float Roughness,
	float Metallic,
	bool isBackface,
	float isPBR)
{
	float3 lVec = (lightPos - position) * (1.0f / LIGHT_SIZE);
	float atten = saturate(1.0f - dot(lVec, lVec));

	float3 finalColor;

	if (isPBR > 0.5f)
	{
		finalColor = PBR(NoL, NoV, -normalizedDirToLight, ViewVec, HalfVec, normal, albedo, specularColor, Roughness, Metallic, isBackface);
	}
	else
	{
		specularColor = calculateSpecular(specularColor, camPos, position, -normalizedDirToLight, normal);

		finalColor = albedo + specularColor;
	}

	return lightCol * finalColor * atten;
}

#endif // SHADING_H
