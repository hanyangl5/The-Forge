/*
 * Copyright (c) 2017-2024 The Forge Interactive Inc.
 * 
 * This file is part of The-Forge
 * (see https://github.com/ConfettiFX/The-Forge).
 * 
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
*/

#include "shaderDefs.h.fsl"

PUSH_CONSTANT(cbRootConstant, b0)
{
    DATA(uint, kernelSize, None);
    DATA(int, width, None);
    DATA(int, height, None);
};

STRUCT(PsIn)
{
    DATA(float4, position, SV_POSITION);
    DATA(float4, uv,       TEXCOORD0);
};

RES(SamplerState,  uSampler, UPDATE_FREQ_NONE, s1, binding = 0);
RES(Tex2D(float4), uTexture, UPDATE_FREQ_NONE, t1, binding = 1);

float4 PS_MAIN(PsIn In, SV_SampleIndex(uint) i)
{
    INIT_MAIN;

    float2 uv_dx = 0.5 * ddx( In.uv.xy );
    float2 uv_dy = 0.5 * ddy( In.uv.xy );

    float2 texCoords = In.uv.xy + uvOffsets[i].x * uv_dx + uvOffsets[i].y * uv_dy;

    float4 color = float4(0.0, 0.0, 0.0, 0.0);

    const float blurSizeX = 1.0 / Get(width);
    const float blurSizeY = 1.0 / Get(height);

    const int kernelRadius = int(Get(kernelSize)/2);
    const float totalSamples = Get(kernelSize) * Get(kernelSize);

    for (int y = -kernelRadius; y < kernelRadius + 1; y++) {
        for (int x = -kernelRadius; x < kernelRadius + 1; x++) {
            float2 coords = float2(texCoords.x + x * blurSizeX, texCoords.y + y * blurSizeY);
            coords = clamp(coords, float2(0.0, 0.0), float2(0.9999, 0.9999));
            color += float4(SampleTex2D(Get(uTexture), Get(uSampler), coords).rgb, 1.0) / totalSamples;
        }
    }
    
    RETURN(color);
}
