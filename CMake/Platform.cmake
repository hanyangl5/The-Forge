# PLATFORM Files

set(PLATFORM_INTERFACE_DIR ${ENGINE_RUNTIME_SOURCE_DIR}/Platform/Public)
set(PLATFORM_SOURCE_DIR ${ENGINE_RUNTIME_SOURCE_DIR}/Platform/Private)

# file(GLOB_RECURSE PLATFORM_INCLUDE_FILES ${PLATFORM_INTERFACE_DIR}/Platform/*.h)
# file(GLOB_RECURSE PLATFORM_SOURCE_FILES ${PLATFORM_SOURCE_DIR}/**.cpp ${PLATFORM_SOURCE_DIR}/**.c)
file(GLOB_RECURSE PLATFORM_INTERFACE_FILES ${PLATFORM_INTERFACE_DIR}/Platform/*.h ${PLATFORM_INTERFACE_DIR}/Platform/*.hpp)

file(GLOB_RECURSE PLATFORM_WINDOWS_INCLUDE_FILES ${PLATFORM_SOURCE_DIR}/Windows/**.h ${PLATFORM_SOURCE_DIR}/Windows/**.hpp)
file(GLOB_RECURSE PLATFORM_WINDOWS_SOURCE_FILES ${PLATFORM_SOURCE_DIR}/Windows/**.cpp ${PLATFORM_SOURCE_DIR}/Windows/**.c)

file(GLOB_RECURSE PLATFORM_LINUX_INCLUDE_FILES ${PLATFORM_SOURCE_DIR}/Linux/**.h ${PLATFORM_SOURCE_DIR}/Linux/**.hpp)
file(GLOB_RECURSE PLATFORM_LINUX_SOURCE_FILES ${PLATFORM_SOURCE_DIR}/Linux/**.cpp ${PLATFORM_SOURCE_DIR}/Linux/**.c)


file(GLOB PLATFORM_INCLUDE_FILES ${PLATFORM_SOURCE_DIR}/**.h ${PLATFORM_SOURCE_DIR}/**.hpp)
file(GLOB PLATFORM_SOURCE_FILES ${PLATFORM_SOURCE_DIR}/**.cpp ${PLATFORM_SOURCE_DIR}/**.c)



# set(PLATFORM_ANDROID_FILES
#     ${PLATFORM_SOURCE_DIR}/Android/*.c
#     ${PLATFORM_SOURCE_DIR}/Android/*.cpp
# )

# set(PLATFORM_LINUX_FILES
#     ${PLATFORM_SOURCE_DIR}/Linux/LinuxBase.cpp
#     ${PLATFORM_SOURCE_DIR}/Linux/LinuxFileSystem.cpp
#     ${PLATFORM_SOURCE_DIR}/Linux/LinuxLog.cpp
#     ${PLATFORM_SOURCE_DIR}/Linux/LinuxThread.cpp
#     ${PLATFORM_SOURCE_DIR}/Linux/LinuxTime.cpp
# )

# set(PLATFORM_QUEST_FILES
#     ${PLATFORM_SOURCE_DIR}/Quest/VrApi.cpp
#     ${PLATFORM_SOURCE_DIR}/Quest/VrApi.h
# )


# set(PLATFORM_WINDOWS_FILES
#     ${PLATFORM_SOURCE_DIR}/Windows/WindowsBase.cpp
#     ${PLATFORM_SOURCE_DIR}/Windows/WindowsFileSystem.cpp
#     ${PLATFORM_SOURCE_DIR}/Windows/WindowsLog.c
#     ${PLATFORM_SOURCE_DIR}/Windows/WindowsStackTraceDump.cpp
#     ${PLATFORM_SOURCE_DIR}/Windows/WindowsStackTraceDump.h
#     ${PLATFORM_SOURCE_DIR}/Windows/WindowsThread.c
#     ${PLATFORM_SOURCE_DIR}/Windows/WindowsTime.c
# )

# set(PLATFORM_DARWIN_FILES
#     ${PLATFORM_SOURCE_DIR}/Darwin/CocoaFileSystem.mm
#     ${PLATFORM_SOURCE_DIR}/Darwin/DarwinLog.c
#     ${PLATFORM_SOURCE_DIR}/Darwin/DarwinThread.c
#     ${PLATFORM_SOURCE_DIR}/FileSystem/UnixFileSystem.cpp
# )

# set(PLATFORM_MACPLATFORM_FILES 
#     ${PLATFORM_SOURCE_DIR}/Darwin/macOSBase.mm
#     ${PLATFORM_SOURCE_DIR}/Darwin/macOSAppDelegate.m
#     ${PLATFORM_SOURCE_DIR}/Darwin/macOSAppDelegate.h
#     ${PLATFORM_SOURCE_DIR}/Darwin/macOSWindow.mm
# )

set(PLATFORM_UTILS_FILES
    ${ENGINE_THIRD_PARTY_SOURCE_DIR}/EASTL/EASTL.natvis
)

set(PLATFORM_WINDOWSYSTEM_FILES
    ${PLATFORM_SOURCE_DIR}/WindowSystem/WindowSystem.cpp
)

set(PLATFORM_INPUT_FILES
    ${PLATFORM_SOURCE_DIR}/InputSystem.cpp
)

set(PLATFORM_PLATFORM_SPECIFIC_FILES "")

# if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
#     message("Apple platform detected. Generating macOS and iOS targets.")
#     set(APPLE_PLATFORM ON)
# endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set(PLATFORM_INCLUDE_FILES ${PLATFORM_INCLUDE_FILES} ${PLATFORM_LINUX_INCLUDE_FILES})
    set(PLATFORM_SOURCE_FILES ${PLATFORM_SOURCE_FILES} ${PLATFORM_LINUX_SOURCE_FILES})
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set(PLATFORM_INCLUDE_FILES ${PLATFORM_INCLUDE_FILES} ${PLATFORM_WINDOWS_INCLUDE_FILES})
    set(PLATFORM_SOURCE_FILES ${PLATFORM_SOURCE_FILES} ${PLATFORM_WINDOWS_SOURCE_FILES})
endif()

# source_group(PLATFORM\\WindowSystem FILES ${PLATFORM_WINDOWSYSTEM_FILES})

# if (${APPLE_PLATFORM} MATCHES ON)
#     source_group(PLATFORM\\macOS FILES ${PLATFORM_MACPLATFORM_FILES} ${PLATFORM_DARWIN_FILES})

#     set(PLATFORM_PLATFORM_SPECIFIC_FILES ${PLATFORM_MACPLATFORM_FILES} ${PLATFORM_DARWIN_FILES})
#     set(GAINPUT_STATIC_FILES ${GAINPUT_STATIC_FILES} ${GAINPUT_MACPLATFORM_FILES})
#     set(CMAKE_CXX_FLAGS "-x objective-c++")
# endif()

# if (WINDOWS MATCHES ON)
#     #source_group(PLATFORM\\Windows FILES ${PLATFORM_WINDOWS_FILES})

#     set(PLATFORM_PLATFORM_SPECIFIC_FILES ${PLATFORM_WINDOWS_FILES})
# endif()

